// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tarantool/go-tarantool (interfaces: Connector)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	tarantool "github.com/tarantool/go-tarantool"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockConnector) Call(arg0 string, arg1 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockConnectorMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockConnector)(nil).Call), arg0, arg1)
}

// Call17 mocks base method.
func (m *MockConnector) Call17(arg0 string, arg1 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call17", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call17 indicates an expected call of Call17.
func (mr *MockConnectorMockRecorder) Call17(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17", reflect.TypeOf((*MockConnector)(nil).Call17), arg0, arg1)
}

// Call17Async mocks base method.
func (m *MockConnector) Call17Async(arg0 string, arg1 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call17Async", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// Call17Async indicates an expected call of Call17Async.
func (mr *MockConnectorMockRecorder) Call17Async(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17Async", reflect.TypeOf((*MockConnector)(nil).Call17Async), arg0, arg1)
}

// Call17Typed mocks base method.
func (m *MockConnector) Call17Typed(arg0 string, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call17Typed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call17Typed indicates an expected call of Call17Typed.
func (mr *MockConnectorMockRecorder) Call17Typed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17Typed", reflect.TypeOf((*MockConnector)(nil).Call17Typed), arg0, arg1, arg2)
}

// CallAsync mocks base method.
func (m *MockConnector) CallAsync(arg0 string, arg1 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallAsync", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// CallAsync indicates an expected call of CallAsync.
func (mr *MockConnectorMockRecorder) CallAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAsync", reflect.TypeOf((*MockConnector)(nil).CallAsync), arg0, arg1)
}

// CallTyped mocks base method.
func (m *MockConnector) CallTyped(arg0 string, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTyped indicates an expected call of CallTyped.
func (mr *MockConnectorMockRecorder) CallTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTyped", reflect.TypeOf((*MockConnector)(nil).CallTyped), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnector)(nil).Close))
}

// ConfiguredTimeout mocks base method.
func (m *MockConnector) ConfiguredTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfiguredTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ConfiguredTimeout indicates an expected call of ConfiguredTimeout.
func (mr *MockConnectorMockRecorder) ConfiguredTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfiguredTimeout", reflect.TypeOf((*MockConnector)(nil).ConfiguredTimeout))
}

// ConnectedNow mocks base method.
func (m *MockConnector) ConnectedNow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedNow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConnectedNow indicates an expected call of ConnectedNow.
func (mr *MockConnectorMockRecorder) ConnectedNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedNow", reflect.TypeOf((*MockConnector)(nil).ConnectedNow))
}

// Delete mocks base method.
func (m *MockConnector) Delete(arg0, arg1, arg2 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockConnectorMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConnector)(nil).Delete), arg0, arg1, arg2)
}

// DeleteAsync mocks base method.
func (m *MockConnector) DeleteAsync(arg0, arg1, arg2 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// DeleteAsync indicates an expected call of DeleteAsync.
func (mr *MockConnectorMockRecorder) DeleteAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsync", reflect.TypeOf((*MockConnector)(nil).DeleteAsync), arg0, arg1, arg2)
}

// DeleteTyped mocks base method.
func (m *MockConnector) DeleteTyped(arg0, arg1, arg2, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTyped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTyped indicates an expected call of DeleteTyped.
func (mr *MockConnectorMockRecorder) DeleteTyped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTyped", reflect.TypeOf((*MockConnector)(nil).DeleteTyped), arg0, arg1, arg2, arg3)
}

// Eval mocks base method.
func (m *MockConnector) Eval(arg0 string, arg1 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval.
func (mr *MockConnectorMockRecorder) Eval(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockConnector)(nil).Eval), arg0, arg1)
}

// EvalAsync mocks base method.
func (m *MockConnector) EvalAsync(arg0 string, arg1 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalAsync", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// EvalAsync indicates an expected call of EvalAsync.
func (mr *MockConnectorMockRecorder) EvalAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalAsync", reflect.TypeOf((*MockConnector)(nil).EvalAsync), arg0, arg1)
}

// EvalTyped mocks base method.
func (m *MockConnector) EvalTyped(arg0 string, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvalTyped indicates an expected call of EvalTyped.
func (mr *MockConnectorMockRecorder) EvalTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalTyped", reflect.TypeOf((*MockConnector)(nil).EvalTyped), arg0, arg1, arg2)
}

// GetTyped mocks base method.
func (m *MockConnector) GetTyped(arg0, arg1, arg2, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTyped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTyped indicates an expected call of GetTyped.
func (mr *MockConnectorMockRecorder) GetTyped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTyped", reflect.TypeOf((*MockConnector)(nil).GetTyped), arg0, arg1, arg2, arg3)
}

// Insert mocks base method.
func (m *MockConnector) Insert(arg0, arg1 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockConnectorMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockConnector)(nil).Insert), arg0, arg1)
}

// InsertAsync mocks base method.
func (m *MockConnector) InsertAsync(arg0, arg1 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAsync", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// InsertAsync indicates an expected call of InsertAsync.
func (mr *MockConnectorMockRecorder) InsertAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAsync", reflect.TypeOf((*MockConnector)(nil).InsertAsync), arg0, arg1)
}

// InsertTyped mocks base method.
func (m *MockConnector) InsertTyped(arg0, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTyped indicates an expected call of InsertTyped.
func (mr *MockConnectorMockRecorder) InsertTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTyped", reflect.TypeOf((*MockConnector)(nil).InsertTyped), arg0, arg1, arg2)
}

// Ping mocks base method.
func (m *MockConnector) Ping() (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockConnectorMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockConnector)(nil).Ping))
}

// Replace mocks base method.
func (m *MockConnector) Replace(arg0, arg1 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockConnectorMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockConnector)(nil).Replace), arg0, arg1)
}

// ReplaceAsync mocks base method.
func (m *MockConnector) ReplaceAsync(arg0, arg1 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAsync", arg0, arg1)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// ReplaceAsync indicates an expected call of ReplaceAsync.
func (mr *MockConnectorMockRecorder) ReplaceAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAsync", reflect.TypeOf((*MockConnector)(nil).ReplaceAsync), arg0, arg1)
}

// ReplaceTyped mocks base method.
func (m *MockConnector) ReplaceTyped(arg0, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceTyped indicates an expected call of ReplaceTyped.
func (mr *MockConnectorMockRecorder) ReplaceTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTyped", reflect.TypeOf((*MockConnector)(nil).ReplaceTyped), arg0, arg1, arg2)
}

// Select mocks base method.
func (m *MockConnector) Select(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockConnectorMockRecorder) Select(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockConnector)(nil).Select), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SelectAsync mocks base method.
func (m *MockConnector) SelectAsync(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAsync", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// SelectAsync indicates an expected call of SelectAsync.
func (mr *MockConnectorMockRecorder) SelectAsync(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAsync", reflect.TypeOf((*MockConnector)(nil).SelectAsync), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SelectTyped mocks base method.
func (m *MockConnector) SelectTyped(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5, arg6 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTyped", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectTyped indicates an expected call of SelectTyped.
func (mr *MockConnectorMockRecorder) SelectTyped(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTyped", reflect.TypeOf((*MockConnector)(nil).SelectTyped), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Update mocks base method.
func (m *MockConnector) Update(arg0, arg1, arg2, arg3 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConnectorMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConnector)(nil).Update), arg0, arg1, arg2, arg3)
}

// UpdateAsync mocks base method.
func (m *MockConnector) UpdateAsync(arg0, arg1, arg2, arg3 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsync", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// UpdateAsync indicates an expected call of UpdateAsync.
func (mr *MockConnectorMockRecorder) UpdateAsync(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsync", reflect.TypeOf((*MockConnector)(nil).UpdateAsync), arg0, arg1, arg2, arg3)
}

// UpdateTyped mocks base method.
func (m *MockConnector) UpdateTyped(arg0, arg1, arg2, arg3, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTyped", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTyped indicates an expected call of UpdateTyped.
func (mr *MockConnectorMockRecorder) UpdateTyped(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTyped", reflect.TypeOf((*MockConnector)(nil).UpdateTyped), arg0, arg1, arg2, arg3, arg4)
}

// Upsert mocks base method.
func (m *MockConnector) Upsert(arg0, arg1, arg2 interface{}) (*tarantool.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockConnectorMockRecorder) Upsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockConnector)(nil).Upsert), arg0, arg1, arg2)
}

// UpsertAsync mocks base method.
func (m *MockConnector) UpsertAsync(arg0, arg1, arg2 interface{}) *tarantool.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tarantool.Future)
	return ret0
}

// UpsertAsync indicates an expected call of UpsertAsync.
func (mr *MockConnectorMockRecorder) UpsertAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAsync", reflect.TypeOf((*MockConnector)(nil).UpsertAsync), arg0, arg1, arg2)
}
